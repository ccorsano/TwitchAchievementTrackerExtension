using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using TwitchAchievementTrackerBackend.Model;
using TwitchAchievementTrackerBackend.Model.Steam;
using TwitchAchievementTrackerBackend.Model.XApi;

namespace TwitchAchievementTrackerBackend.Services
{
    public class ConfigurationService
    {
        private readonly SteamApiService _steamApiService;
        private readonly XApiService _xApiService;
        private readonly Regex XAPI_REGEX = new Regex("^[0-9a-zA-Z]{40}$", RegexOptions.Compiled);
        private readonly IMemoryCache _cache;
        private readonly ILogger _logger;

        public ConfigurationService(ILogger<ConfigurationTokenService> logger, SteamApiService steamApiService, XApiService xApiService, IMemoryCache memoryCache)
        {
            _steamApiService = steamApiService;
            _xApiService = xApiService;
            _cache = memoryCache;
            _logger = logger;
        }

        /// <summary>
        /// Using cultures.json file, generated by:
        /// 
        /// </summary>
        /// <example>
        /// using System.Globalization;
        /// CultureInfo[] cinfo = CultureInfo.GetCultures(CultureTypes.AllCultures & ~CultureTypes.NeutralCultures);
        /// Console.WriteLine($"[{string.Join(",", cinfo.Select(c => $"{{\"DisplayName\": \"{c.EnglishName}\", \"LangCode\": \"{c.Name}\"}}"))}]")
        /// </example>
        /// <returns></returns>
        private async Task<Dictionary<string, SupportedLanguage>> GetEmbededCulturesNames()
        {
            if (!_cache.TryGetValue<Dictionary<string, SupportedLanguage>>("culturesnames", out var cultures))
            {
                using (var culturesStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("TwitchAchievementTrackerBackend.Cultures.json"))
                {
                    var definitions = await JsonSerializer.DeserializeAsync<SupportedLanguage[]>(culturesStream);
                    cultures = definitions.ToDictionary(d => d.LangCode.ToLowerInvariant(), d => d);
                    _cache.Set("culturesnames", cultures);
                }
            }
            return cultures;
        }

        public async Task<SupportedLanguage[]> GetXBoxLiveSupportedLanguages(string titleId, string xApiKey)
        {
            var marketPlace = await _xApiService.GetMarketplaceAsync(titleId, xApiKey);
            var supportedLanguages = marketPlace.Products
                .SelectMany(p => p.DisplaySkuAvailabilities?
                    .SelectMany(dsa => dsa.Sku?.MarketProperties?
                        .SelectMany(mp => mp.SupportedLanguages) ?? new string[] { }) ?? new string[] { })
                .Distinct();

            // Resolve cultures based on embeded definition
            var cultures = await GetEmbededCulturesNames();
            return supportedLanguages
                .Select(l =>
                {
                    if (cultures.TryGetValue(l.ToLowerInvariant(), out var language))
                    {
                        if (language.DefaultRegion != null)
                        {
                            return cultures.GetValueOrDefault(language.DefaultRegion.ToLowerInvariant())
                                ?? throw new Exception($"Language default region not found {l}; {language.DefaultRegion}");
                        }
                        return language;
                    }
                    return new SupportedLanguage { LangCode = l, DisplayName = l };
                })
                .ToArray();
        }

        public async Task<SupportedLanguage[]> GetSteamSupportedLanguages(string gameId, string webApiKey)
        {
            var schema = await _steamApiService.GetGameSchema(gameId);
            var storeDetails = await _steamApiService.GetStoreDetails(UInt32.Parse(gameId));

            // Supported language are given in a readable, customizable format. Do our best guess here.
            var supportedLanguage = new List<SupportedLanguage>();
            var lowercaseGameLanguages = storeDetails.SupportedLanguages.ToLowerInvariant();
            foreach (var langEntry in SteamApiService.STEAM_SUPPORTED_LANGUAGES)
            {
                if (lowercaseGameLanguages.Contains(langEntry.DisplayName.ToLowerInvariant()))
                {
                    supportedLanguage.Add(langEntry);
                }
            }

            return supportedLanguage.ToArray();
        }

        public async Task<PlayerInfoCard> GetSteamPlayerInfo(string steamId, string webApiKey = null)
        {
            var playerInfo = await _steamApiService.GetPlayersSummaries(new string[] { steamId }, webApiKey);

            return new PlayerInfoCard
            {
                PlayerId = steamId,
                PlayerName = playerInfo.First().PersonaName,
                AvatarUrl = playerInfo.First().AvatarFull.AbsoluteUri,
            };
        }

        public async Task<bool> ForceRefresh(ExtensionConfiguration extensionConfiguration)
        {
            switch (extensionConfiguration.ActiveConfig)
            {
                case ActiveConfig.XBoxLive:
                    return await _xApiService.PurgeCache(extensionConfiguration.XBoxLiveConfig);
                case ActiveConfig.Steam:
                    return await _steamApiService.PurgeCache(extensionConfiguration.SteamConfig);
                default:
                    throw new NotSupportedException("Unknown config type");
            }
        }

        internal RateLimits GetXApiRateLimits(ExtensionConfiguration extensionConfiguration)
        {
            if (extensionConfiguration.ActiveConfig != ActiveConfig.XBoxLive)
            {
                throw new ArgumentException("Only valid on XBoxLive configs");
            }
            return _xApiService.GetRateLimit(extensionConfiguration.XBoxLiveConfig.XApiKey);
        }

        public async Task<PlayerInfoCard> ResolveXBoxLiveGamertag(string gamertag, string xApiKey = null)
        {
            var xuid = await _xApiService.ResolveXuid(gamertag, xApiKey);
            var playerInfo = await _xApiService.GetGamerCard(xuid, xApiKey);

            return new PlayerInfoCard
            {
                PlayerId = xuid,
                PlayerName = playerInfo.Gamertag,
                AvatarUrl = playerInfo.GamerpicLargeSslImagePath,
            };
        }

        public async Task<PlayerInfoCard> GetXBoxLivePlayerInfo(string xuid, string xApiKey = null)
        {
            var playerInfo = await _xApiService.GetGamerCard(xuid, xApiKey);

            return new PlayerInfoCard
            {
                PlayerId = xuid,
                PlayerName = playerInfo.Gamertag,
                AvatarUrl = playerInfo.GamerpicLargeSslImagePath,
            };
        }

        public async Task<TitleInfo> GetXBoxLiveTitleInfo(string titleId, string xApiKey)
        {
            var titleInfo = await _xApiService.GetMarketplaceAsync(titleId, xApiKey);

            return new TitleInfo
            {
                TitleId = titleId,
                ProductTitle = titleInfo.Products.FirstOrDefault()?.LocalizedProperties?.FirstOrDefault()?.ProductTitle ?? "Unknown",
                ProductDescription = titleInfo.Products.FirstOrDefault()?.LocalizedProperties?.FirstOrDefault()?.ProductDescription ?? "-",
                LogoUri = titleInfo.Products.FirstOrDefault()?
                    .LocalizedProperties?.FirstOrDefault()?
                    .Images?
                        .Where(i => i.ImagePurpose == "Logo" || i.ImagePurpose == "Tile" || i.ImagePurpose == "BoxArt" || i.ImagePurpose == "FeaturePromotionalSquareArt")?
                        .FirstOrDefault()?.Uri,
            };
        }

        public async Task<TitleInfo[]> GetXBoxLiveRecentTitles(string xuid, string xApiKey)
        {
            var titleHistory = await _xApiService.GetRecentTitlesAsync(xuid, xApiKey);

            return titleHistory.Titles
                // Exclude non XBoxLive titles
                .Where(titleInfo => titleInfo.Pfn != null)
                .Select(titleInfo => new TitleInfo
                {
                    TitleId = titleInfo.TitleId,
                    ProductTitle = titleInfo.Name,
                    ProductDescription = "",
                    LogoUri = titleInfo.Images
                    .FirstOrDefault(i => i.Type == XApiImageType.Tile || i.Type == XApiImageType.BoxArt || i.Type == XApiImageType.FeaturePromotionalSquareArt)?.Url?.AbsoluteUri
                }).ToArray();
        }

        public async Task<PlayerInfoCard> ResolveSteamProfileUrl(string profileUrl, string webApiKey = null)
        {
            var response = await _steamApiService.ResolveVanityUrl(profileUrl, webApiKey);

            if (string.IsNullOrEmpty(response.SteamId))
            {
                return null;
            }

            var playerInfo = await _steamApiService.GetPlayersSummaries(new string[] { response.SteamId }, webApiKey);

            return new PlayerInfoCard
            {
                PlayerId = response.SteamId,
                PlayerName = playerInfo.First().PersonaName,
                AvatarUrl = playerInfo.First().AvatarFull.AbsoluteUri,
            };
        }

        public async Task<SteamPlayerOwnedGameInfo[]> GetSteamOwnedGames(string steamId, string webApiKey = null)
        {
            return await _steamApiService.GetOwnedGames(steamId, webApiKey);
        }

        public async Task<ValidationError[]> ValidateTitle(ExtensionConfiguration configuration)
        {
            var errors = new List<ValidationError>();

            switch (configuration.ActiveConfig)
            {
                case ActiveConfig.XBoxLive:
                    if (string.IsNullOrEmpty(configuration.XBoxLiveConfig.Locale))
                    {
                        configuration.XBoxLiveConfig.Locale = "en";
                    }

                    if (!string.IsNullOrEmpty(configuration.XBoxLiveConfig.StreamerXuid) && !string.IsNullOrEmpty(configuration.XBoxLiveConfig.TitleId))
                    {
                        try
                        {
                            var achievements = await _xApiService.GetAchievementsAsync(configuration.XBoxLiveConfig);

                            if (achievements.Count() == 0)
                            {
                                _logger.LogError($"No achievements found for title {configuration.XBoxLiveConfig.TitleId}");

                                errors.Add(new ValidationError
                                {
                                    Path = "XBoxLiveConfig.TitleId",
                                    ErrorCode = "NoAchievements",
                                    ErrorDescription = "This XBoxLive title doesn't have any achievements defined.",
                                });
                            }
                        }
                        catch(HttpRequestException ex)
                        {
                            _logger.LogError(ex, $"Error validating title {configuration.XBoxLiveConfig.TitleId}");

                            errors.Add(new ValidationError
                            {
                                Path = "XBoxLiveConfig.TitleId",
                                ErrorCode = "TitleError",
                                ErrorDescription = "Error fetching title information.",
                            });
                        }
                    }
                    else
                    {
                        throw new ArgumentException("Incomplete configuration to validate title, xuid and titleid are required");
                    }
                    break;
                case ActiveConfig.Steam:
                    
                    if (!string.IsNullOrEmpty(configuration.SteamConfig.AppId))
                    {
                        try
                        {
                            await _steamApiService.GetAchievementsAsync(configuration.SteamConfig);
                        }
                        catch (SteamApiService.GameDetailsProtectedException)
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "SteamConfig.SteamId",
                                ErrorCode = "PrivateProfile",
                                ErrorDescription = "The provided Steam profile does not allow access to achievements, please edit your profile and set the \"Game details\" privacy setting to public.",
                            });
                        }
                        catch (Exception ex)
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "SteamConfig",
                                ErrorCode = "AchievementsError",
                                ErrorDescription = $"Unknown error retrieving achievements: {ex.Message}",
                            });
                        }
                    }

                    break;
                default:
                    errors.Add(new ValidationError
                    {
                        Path = "ActiveConfig",
                        ErrorCode = "InvalidConfigType",
                        ErrorDescription = "Invalid active configuration type",
                    });
                    break;
            }

            return errors.ToArray();
        }

        public async Task<ValidationError[]> ValidateConfiguration(ExtensionConfiguration configuration)
        {
            var errors = new List<ValidationError>();

            switch (configuration.ActiveConfig)
            {
                case ActiveConfig.XBoxLive:
                    if (string.IsNullOrEmpty(configuration.XBoxLiveConfig.XApiKey) || !XAPI_REGEX.IsMatch(configuration.XBoxLiveConfig.XApiKey))
                    {
                        errors.Add(new ValidationError
                        {
                            Path = "XBoxLiveConfig.XApiKey",
                            ErrorCode = "InvalidFormat",
                            ErrorDescription = "XApi.us key missing or invalid. It must be 40 character long and hexadecimal.",
                        });
                    }
                    else
                    {
                        try
                        {
                            await _xApiService.GetApiKeyProfile(configuration.XBoxLiveConfig.XApiKey);

                            if (!string.IsNullOrEmpty(configuration.XBoxLiveConfig.StreamerXuid) && !string.IsNullOrEmpty(configuration.XBoxLiveConfig.TitleId))
                            {
                                errors.AddRange(await ValidateTitle(configuration));
                            }
                        }
                        catch (XApiException ex)
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "XBoxLiveConfig.XApiKey",
                                ErrorCode = ex.ErrorCode,
                                ErrorDescription = ex.Message,
                            });
                        }
                        catch (HttpRequestException ex)
                        {
                            _logger.LogError(ex, "Error validating XApiKey");

                            errors.Add(new ValidationError
                            {
                                Path = "XBoxLiveConfig.XApiKey",
                                ErrorCode = "XApiError",
                                ErrorDescription = "Error calling into XApi",
                            });
                        }

                        if (string.IsNullOrEmpty(configuration.XBoxLiveConfig.StreamerXuid))
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "XBoxLiveConfig.StreamerXuid",
                                ErrorCode = "MissingValue",
                                ErrorDescription = "Missing Streamer XBoxLive Id",
                            });
                        }
                        
                        if (string.IsNullOrEmpty(configuration.XBoxLiveConfig.TitleId))
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "XBoxLiveConfig.TitleId",
                                ErrorCode = "MissingValue",
                                ErrorDescription = "Missing XBoxLive Title Id",
                            });
                        }
                    }
                    break;
                case ActiveConfig.Steam:
                    if (!await _steamApiService.TestApiKey(configuration.SteamConfig.WebApiKey))
                    {
                        errors.Add(new ValidationError
                        {
                            Path = "SteamConfig.WebApiKey",
                            ErrorCode = "InvalidKey",
                            ErrorDescription = "The WebApi Key was refused by Steam, please check it is entered correctly.",
                        });
                        // No reason to validate past this
                        break;
                    }


                    if (string.IsNullOrEmpty(configuration.SteamConfig.SteamId))
                    {
                        errors.Add(new ValidationError
                        {
                            Path = "SteamConfig.SteamId",
                            ErrorCode = "MissingValue",
                            ErrorDescription = "SteamId is not set.",
                        });
                    }
                    else
                    {
                        var playerSummaries = await _steamApiService.GetPlayersSummaries(new string[] { configuration.SteamConfig.SteamId }, configuration.SteamConfig.WebApiKey);
                        var playerSummary = playerSummaries.First();

                        if (playerSummary.CommunityVisibilityState != 3)
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "SteamConfig.SteamId",
                                ErrorCode = "PrivateProfile",
                                ErrorDescription = "The provided Steam profile cannot be accessed, check that is it set to public.",
                            });
                        }
                        else if (! string.IsNullOrEmpty(configuration.SteamConfig.AppId))
                        {
                            errors.AddRange(await ValidateTitle(configuration));
                        }

                        if (string.IsNullOrEmpty(configuration.SteamConfig.AppId))
                        {
                            errors.Add(new ValidationError
                            {
                                Path = "SteamConfig.AppId",
                                ErrorCode = "MissingValue",
                                ErrorDescription = "Steam AppId is not set.",
                            });
                        }
                    }

                    break;
                default:
                    errors.Add(new ValidationError
                    {
                        Path = "ActiveConfig",
                        ErrorCode = "InvalidConfigType",
                        ErrorDescription = "Invalid active configuration type",
                    });
                    break;
            }

            return errors.ToArray();
        }
    }
}
